{
    "structure": {
        "pcie_capability_structure": {
            "info": {
                "cap_id": 16,
                "offset": 0,
                "size": 64
            },
            "registers": [
                "pcie_capabilities",
                "device_capabilities_register",
                "device_control_register",
                "device_status_register",
                "link_capabilities_register",
                "link_control_register",
                "link_status_register"
            ]
        }
    },
    "register": {
        "pcie_capabilities": {
            "offset": 2,
            "size": 2,
            "fields": [{
                    "bit": 0,
                    "bit_width": 4,
                    "name": "capability_version",
                    "default": 2,
                    "description": "Capability Version - Indicates PCI-SIG defined PCI Express Capability structure version number.\nA version of the specification that changes the PCI Express Capability structure in a way that is not\notherwise identifiable (e.g., through a new Capability field) is permitted to increment this field. All such\nchanges to the PCI Express Capability structure must be software-compatible. Software must check for\nCapability Version numbers that are greater than or equal to the highest number defined when the\nsoftware is written, as Functions reporting any such Capability Version numbers will contain a PCI\nExpress Capability structure that is compatible with that piece of software.\nMust be hardwired to 2h for Functions compliant to this specification.",
                    "attributes": "RO"
                },
                {
                    "bit": 4,
                    "bit_width": 4,
                    "name": "device_port_type",
                    "default": 0,
                    "value_parse": {
                        "0": "PCI Express Endpoint",
                        "1": "Legacy PCI Express Endpoint",
                        "4": "Root Port of PCI Express Root Complex",
                        "5": "Upstream Port of PCI Express Switch",
                        "6": "Downstream Port of PCI Express Switch",
                        "7": "PCI Express to PCI/PCI-X Bridge",
                        "8": "PCI/PCI-X to PCI Express Bridge",
                        "9": "Root Complex Integrated Endpoint",
                        "10": "Root Complex Event Collector"
                    },
                    "description": "Device/Port Type - Indicates the specific type of this PCI Express Function. Note that different\nFunctions in a Multi-Function Device can generally be of different types.\nDefined encodings for Functions that implement a Type 00h PCI Configuration Space header are:\nPCI Express Endpoint\nLegacy PCI Express Endpoint\nRCiEP\nRoot Complex Event Collector\nDefined encodings for Functions that implement a Type 01h PCI Configuration Space header are:\nRoot Port of PCI Express Root Complex\nUpstream Port of PCI Express Switch\nDownstream Port of PCI Express Switch\nPCI Express to PCI/PCI-X Bridge\nPCI/PCI-X to PCI Express Bridge\nAll other encodings are Reserved.\nNote that the different Endpoint types have notably different requirements in § Section 1.3.2 regarding I/\nO resources, Extended Configuration Space, and other capabilities.",
                    "attributes": "RO"
                },
                {
                    "bit": 8,
                    "bit_width": 1,
                    "name": "slot_implemented",
                    "default": 0,
                    "description": "Slot Implemented - When Set, this bit indicates that the Link associated with this Port is connected to a\nslot (as compared to being connected to a system-integrated device or being disabled).\nThis bit is valid for Downstream Ports. This bit is undefined for Upstream Ports.",
                    "attributes": "HwInit"
                },
                {
                    "bit": 9,
                    "bit_width": 5,
                    "name": "interrupt_message_number",
                    "default": 0,
                    "description": "Interrupt Message Number - This field indicates which MSI/MSI-X vector is used for the interrupt\nmessage generated in association with any of the status bits of this Capability structure.\nFor MSI, the value in this field indicates the offset between the base Message Data and the interrupt\nmessage that is generated. Hardware is required to update this field so that it is correct if the number of\nMSI Messages assigned to the Function changes when software writes to the Multiple Message Enable\nfield in the Message Control Register for MSI.\nFor MSI-X, the value in this field indicates which MSI-X Table entry is used to generate the interrupt\nmessage. The entry must be one of the first 32 entries even if the Function implements more than 32\nentries. For a given MSI-X implementation, the entry must remain constant.\nIf both MSI and MSI-X are implemented, they are permitted to use different vectors, though software is\npermitted to enable only one mechanism at a time. If MSI-X is enabled, the value in this field must\nindicate the vector for MSI-X. If MSI is enabled or neither is enabled, the value in this field must indicate\nthe vector for MSI. If software enables both MSI and MSI-X at the same time, the value in this field is\nundefined.",
                    "attributes": "RO"
                },
                {
                    "bit": 14,
                    "bit_width": 1,
                    "name": "undefined",
                    "default": 0,
                    "description": "Undefined - The value read from this bit is undefined. In previous versions of this specification, this bit\nwas used to indicate support for TCS Routing. System software should ignore the value read from this\nbit. System software is permitted to write any value to this bit.",
                    "attributes": "RO"
                },
                {
                    "bit": 15,
                    "bit_width": 1,
                    "name": "flit_mode_supported",
                    "default": 0,
                    "description": "Flit Mode Supported – When Set, indicates support for Flit Mode. Must be Set by all implementations\nthat support Flit Mode. Must be Clear by implementations that do not support Flit Mode.",
                    "attributes": "HwInit"
                }
            ]
        },

        "device_capabilities_register": {
            "offset": 4,
            "size": 4,
            "fields": [{
                    "bit": 0,
                    "bit_width": 3,
                    "name": "max_payload_size_supported",
                    "default": 512,
                    "value_parse": {
                        "000": "128 bytes max payload size",
                        "001": "256 bytes max payload size",
                        "010": "512 bytes max payload size",
                        "011": "1024 bytes max payload size",
                        "100": "2048 bytes max payload size",
                        "101": "4096 bytes max payload size",
                        "110": "Reserved",
                        "111": "Reserved"
                    },
                    "description": "This field indicates the maximum payload size that the Function can support for TLPs. The minimum value MUST be 512 bytes. If the Rx_MPS_Fixed bit is Set, the Function's Rx_MPS_Limit is fixed with the value indicated by this field. Otherwise, the Rx_MPS_Limit is determined by the Max_Payload_Size field in one or more Functions. The Functions of a Multi-Function Device may report different values for this field.",
                    "attributes": "RO"
                },
                {
                    "bit": 3,
                    "bit_width": 2,
                    "name": "phantom_functions_supported",
                    "default": 0,
                    "value_parse": {
                        "00": "No Function Number bits are used for Phantom Functions",
                        "01": "The most significant bit of the Function number is used for Phantom Functions (Functions 0-3).",
                        "10": "The two most significant bits of Function number are used for Phantom Functions (Functions 0-1).",
                        "11": "All 3 bits of Function Number are used for Phantom Functions (single Function 0 with all other Function Numbers as Phantom Functions)."
                    },
                    "description": "This field indicates the support for the use of unclaimed Function Numbers (Phantom Functions) to extend the number of outstanding transactions. It is used by logically combining unclaimed Function Numbers with the Tag identifier. For PF with VF Enable bit Set, Phantom Functions are not permitted, and this field must return Zero. VFs and ARI Devices must return Zero. Phantom Function support must be enabled by the Phantom Functions Enable field in the Device Control Register.",
                    "attributes": "RO",
                    "vf_attribute": "ROZ"
                },
                {
                    "bit": 5,
                    "bit_width": 1,
                    "name": "extended_tag_field_supported",
                    "default": 0,
                    "value_parse": {
                        "0": "5-bit Tag Requester capability supported",
                        "1": "8-bit Tag Requester capability supported"
                    },
                    "description": "This bit, in combination with the 10-Bit Tag Requester Supported bit and the 14-Bit Tag Requester Supported bit, indicates the maximum supported size of the Tag field as a Requester. This bit must be Set if the 10-Bit Tag Requester Supported bit or the 14-Bit Tag Requester Supported bit is Set. \nNote that 8-bit Tag field generation must be enabled by the Extended Tag Field Enable bit in the Device Control Register of the Requester Function before 8-bit Tags can be generated by the Requester. See § Section 2.2.6.2 for interactions with enabling the use of 10-Bit or 14-Bit Tags.",
                    "attributes": "RO"
                },
                {
                    "bit": 6,
                    "bit_width": 3,
                    "name": "endpoint_l0s_acceptable_latency",
                    "default": 0,
                    "value_parse": {
                        "000": "Maximum of 64 ns",
                        "001": "Maximum of 128 ns",
                        "010": "Maximum of 256 ns",
                        "011": "Maximum of 512 ns",
                        "100": "Maximum of 1 μs",
                        "101": "Maximum of 2 μs",
                        "110": "Maximum of 4 μs",
                        "111": "No limit"
                    },
                    "description": "This field indicates the acceptable total latency that an Endpoint can withstand due to the transition from L0s state to the L0 state. It is essentially an indirect measure of the Endpoint’s internal buffering. \nPower management software uses the reported L0s Acceptable Latency number to compare against the L0s exit latencies reported by all components comprising the data path from this Endpoint to the Root Complex Root Port to determine whether ASPM L0s entry can be used with no loss of performance.",
                    "attributes": "RO"
                },
                {
                    "bit": 9,
                    "bit_width": 3,
                    "name": "endpoint_l1_acceptable_latency",
                    "default": 0,
                    "value_parse": {
                        "000": "Maximum of 1 μs",
                        "001": "Maximum of 2 μs",
                        "010": "Maximum of 4 μs",
                        "011": "Maximum of 8 μs",
                        "100": "Maximum of 16 μs",
                        "101": "Maximum of 32 μs",
                        "110": "Maximum of 64 μs",
                        "111": "No limit"
                    },
                    "description": "This field indicates the acceptable latency that an Endpoint can withstand due to the transition from L1 state to the L0 state. It is essentially an indirect measure of the Endpoint’s internal buffering. \nPower management software uses the reported L1 Acceptable Latency number to compare against the L1 Exit Latencies reported by all components comprising the data path from this Endpoint to the Root Complex Root Port to determine whether ASPM L1 entry can be used with no loss of performance.",
                    "attributes": "RO"
                },
                {
                    "bit": 12,
                    "bit_width": 3,
                    "name": "undefined",
                    "default": 0,
                    "description": "The value read from these bits are undefined. \nIn previous versions of this specification, this bit was used to indicate that an Attention Button, Attention Indicator, or Power Indicator, is implemented on the adapter and electrically controlled by the component on the adapter. \nSystem software must ignore the value read from this bit. \nSystem software is permitted to write any value to this bit.",
                    "attributes": "RO"
                },
                {
                    "bit": 15,
                    "bit_width": 1,
                    "name": "role_based_error_reporting",
                    "default": 0,
                    "description": "When Set, this bit indicates that the Function implements the functionality originally defined in the Error Reporting ECN for PCIe-1.0a, and later incorporated into PCIe-1.1. \nThis bit must be Set by all Functions conforming to the ECN, PCIe-1.1, or subsequent PCIe revisions.",
                    "attributes": "RO"
                },
                {
                    "bit": 16,
                    "bit_width": 1,
                    "name": "err_cor_subclass_capable",
                    "default": 0,
                    "description": "When Set, this bit indicates that the Function supports the ERR_COR Subclass field in ERR_COR Messages, allowing different subclasses to be distinguished. \nSee Section 2.2.8.3. \nDownstream Ports that implement the System Firmware Intermediary (SFI) capability must Set this bit. \nDownstream Ports that implement Downstream Port Containment (DPC) are strongly encouraged to Set this bit.",
                    "attributes": "RO"
                },
                {
                    "bit": 17,
                    "bit_width": 1,
                    "name": "rx_mps_fixed",
                    "default": 0,
                    "description": "When Set, the Function's Rx_MPS_Limit is fixed with the value indicated by the Max_Payload_Size Supported field. \nOtherwise, the Rx_MPS_Limit is determined by the Max_Payload_Size field (the 'MPS setting') in one or more Functions. \nThis bit MUST be Set.",
                    "attributes": "HwInit"
                },
                {
                    "bit": 18,
                    "bit_width": 8,
                    "name": "captured_slot_power_limit_value",
                    "default": 0,
                    "description": "In combination with the Captured Slot Power Limit Scale value, specifies the upper limit on power available to the adapter. \nPower limit (in Watts) is calculated by multiplying the value in this field by the value in the Captured Slot Power Limit Scale field except when the Captured Slot Power Limit Scale field equals 00b (1.0x) and the Captured Slot Power Limit Value exceeds EFh, then alternative encodings are used. \nThis value is set by the Set_Slot_Power_Limit Message or hardwired to 00h. \nThe default value is 00h. \nFor VFs, the field value when read is undefined.",
                    "attributes": "RO"
                },
                {
                    "bit": 26,
                    "bit_width": 2,
                    "name": "captured_slot_power_limit_scale",
                    "default": 0,
                    "description": "Specifies the scale used for the Slot Power Limit Value. \nRange of Values: 1.0x, 0.1x, 0.01x, 0.001x. \nThis value is set by the Set_Slot_Power_Limit Message or hardwired to 00b. \nThe default value is 00b. \nFor VFs, the field value when read is undefined.",
                    "attributes": "RO"
                },
                {
                    "bit": 28,
                    "bit_width": 1,
                    "name": "function_level_reset_capable",
                    "default": 0,
                    "description": "A value of 1b indicates the Function supports the optional Function Level Reset mechanism. \nThis bit applies to Endpoints only. \nFor all other Function types this bit must be hardwired to Zero. \nFor PFs and VFs, the feature is mandatory and this bit must be Set.",
                    "attributes": "RO"
                },

                {
                    "bit": 29,
                    "bit_width": 1,
                    "name": "mixed_mps_supported",
                    "default": 0,
                    "description": "When Set, the Function must have an implementation specific mechanism capable of supporting different MPS settings for different targets. \nThis bit MUST be Set if the Function supports P2P Memory Transactions and the Function's Max_Payload_Size Supported field indicates an MPS value greater than 512 bytes. \nIf not mandatory, supporting Mixed MPS capability may still be beneficial if this Function does P2P with targets or over paths whose supported MPS is significantly less than this Function's supported MPS; e.g., 128 bytes vs. 512 bytes. \nThe implementation specific mechanism must handle both Request and Completion TLPs, and is permitted to base its determination of P2P targets on Memory Space ranges, Bus Number ranges, or implementation specific means; e.g., data mover channels.",
                    "attributes": "HwInit"
                },
                {
                    "bit": 30,
                    "bit_width": 1,
                    "name": "tee_io_supported",
                    "default": 0,
                    "description": "When Set, this bit indicates that the Function implements the TEE-IO functionality as described by the TEE Device Interface Security Protocol (TDISP). \nSee Chapter 11.",
                    "attributes": "HwInit"
                }
            ]
        },

        "device_control_register": {
            "offset": 8,
            "size": 4,
            "fields": [{
                    "bit": 0,
                    "bit_width": 1,
                    "name": "correctable_error_reporting_enable",
                    "default": 0,
                    "description": "This bit, in conjunction with other bits, controls sending ERR_COR Messages (see § Section 6.2.5 , § Section 6.2.6 , and § Section 6.2.11.2 for details). \nFor a Multi-Function Device, this bit controls error reporting for each Function from point-of-view of the respective Function. \nFor a Root Port, the reporting of correctable errors is internal to the root. No external ERR_COR Message is generated. \nAn RCiEP that is not associated with a Root Complex Event Collector is permitted to hardwire this bit to 0b. \nDefault value of this bit is 0b.",
                    "attributes": "RW",
                    "value_parse": {
                        "0": "Disabled",
                        "1": "Enabled"
                    }
                },
                {
                    "bit": 1,
                    "bit_width": 1,
                    "name": "non_fatal_error_reporting_enable",
                    "default": 0,
                    "description": "This bit, in conjunction with other bits, controls sending ERR_NONFATAL Messages (see § Section 6.2.5 and § Section 6.2.6 for details). \nFor a Multi-Function Device, this bit controls error reporting for each Function from point-of-view of the respective Function. \nFor a Root Port, the reporting of Non-fatal errors is internal to the root. No external ERR_NONFATAL Message is generated. \nAn RCiEP that is not associated with a Root Complex Event Collector is permitted to hardwire this bit to 0b. \nDefault value of this bit is 0b.",
                    "attributes": "RW",
                    "value_parse": {
                        "0": "Disabled",
                        "1": "Enabled"
                    }
                },
                {
                    "bit": 2,
                    "bit_width": 1,
                    "name": "fatal_error_reporting_enable",
                    "default": 0,
                    "description": "This bit, in conjunction with other bits, controls sending ERR_FATAL Messages (see § Section 6.2.5 and § Section 6.2.6 for details). \nFor a Multi-Function Device, this bit controls error reporting for each Function from point-of-view of the respective Function. \nFor a Root Port, the reporting of Fatal errors is internal to the root. No external ERR_FATAL Message is generated. \nAn RCiEP that is not associated with a Root Complex Event Collector is permitted to hardwire this bit to 0b. \nDefault value of this bit is 0b.",
                    "attributes": "RW",
                    "value_parse": {
                        "0": "Disabled",
                        "1": "Enabled"
                    }
                },
                {
                    "bit": 3,
                    "bit_width": 1,
                    "name": "unsupported_request_reporting_enable",
                    "default": 0,
                    "description": "This bit, in conjunction with other bits, controls the signaling of Unsupported Request Errors by sending error Messages (see § Section 6.2.5 and § Section 6.2.6 for details). \nFor a Multi-Function Device, this bit controls error reporting for each Function from point-of-view of the respective Function. \nAn RCiEP that is not associated with a Root Complex Event Collector is permitted to hardwire this bit to 0b. \nDefault value of this bit is 0b.",
                    "attributes": "RW",
                    "value_parse": {
                        "0": "Disabled",
                        "1": "Enabled"
                    }
                },
                {
                    "bit": 4,
                    "bit_width": 1,
                    "name": "enable_relaxed_ordering",
                    "default": 1,
                    "description": "If this bit is Set, the Function is permitted to set the Relaxed Ordering bit in the Attributes field of transactions it initiates that do not require strong write ordering (see § Section 2.2.6.4 and § Section 2.4). \nA Function is permitted to hardwire this bit to 0b if it never sets the Relaxed Ordering attribute in transactions it initiates as a Requester. \nWhen not hardwired to 0b, the default value of this bit is 1b.",
                    "attributes": "RW",
                    "value_parse": {
                        "0": "Disabled",
                        "1": "Enabled"
                    }
                },
                {
                    "bit": 5,
                    "bit_width": 3,
                    "name": "max_payload_size",
                    "default": "000",
                    "description": "For specified cases, this field determines the maximum TLP payload size (the MPS setting) for the Function. \nValues permitted to be programmed are indicated by the Max_Payload_Size Supported field. \nAs a Receiver, if the Rx_MPS_Fixed bit is Set, the Rx_MPS_Limit is fixed with the value indicated by the Max_Payload_Size Supported field. Otherwise, the Rx_MPS_Limit is determined by the MPS setting in one or more Functions. \nAs a Transmitter, the Function must not generate TLPs with payloads exceeding the MPS setting, with the exception of Functions in a Multi-Function Device, or Functions with implementation-specific mechanisms capable of supporting different MPS settings for different targets. \nDefined encodings for this field are:\n 128 bytes MPS\n 256 bytes MPS\n 512 bytes MPS\n 1024 bytes MPS\n 2048 bytes MPS\n 4096 bytes MPS \nReserved",
                    "attributes": "RW",
                    "value_parse": {
                        "000": "128 bytes MPS",
                        "001": "256 bytes MPS",
                        "010": "512 bytes MPS",
                        "011": "1024 bytes MPS",
                        "100": "2048 bytes MPS",
                        "101": "4096 bytes MPS",
                        "110": "Reserved",
                        "111": "Reserved"
                    }
                },
                {
                    "bit": 8,
                    "bit_width": 1,
                    "name": "extended_tag_field_enable",
                    "default": "implementation_specific",
                    "description": "This bit, in combination with the 10-Bit Tag Requester Enable bit and the 14-Bit Tag Requester Enable bit, determines how many Tag field bits a Requester is permitted to use. \nThe following applies when the 10-Bit Tag Requester Enable bit and the 14-Bit Tag Requester Enable bit are both Clear. If the Extended Tag Field Enable bit is Set, the Function is permitted to use an 8-bit Tag field as a Requester. If the bit is Clear, the Function is restricted to using a 5-bit Tag field. \nSee § Section 2.2.6.2 for required behavior when one or both of these larger-Tag Requester Enable bits are Set. \nIf software changes the value of the Extended Tag Field Enable bit while the Function has outstanding Non-Posted Requests, the result is undefined. \nFunctions that do not implement this capability hardwire this bit to 0b. \nDefault value of this bit is implementation specific.",
                    "attributes": "RW",
                    "value_parse": {
                        "0": "Disabled",
                        "1": "Enabled"
                    }
                },
                {
                    "bit": 9,
                    "bit_width": 1,
                    "name": "phantom_functions_enable",
                    "default": 0,
                    "description": "This bit, in combination with the 10-Bit Tag Requester Enable bit and the 14-Bit Tag Requester Enable bit, determines how many outstanding Non-Posted Requests a Requester is permitted to generate. \nWhen Set, this bit enables a Function to use unclaimed Functions as Phantom Functions to extend the number of outstanding transaction identifiers. If the bit is Clear, the Function is not allowed to use Phantom Functions. \nBehavior is undefined when this bit is Set in Functions with enabled Shadow Functions. \nSoftware should not change the value of this bit while the Function has outstanding Non-Posted Requests; otherwise, the result is undefined. \nFunctions that do not implement this capability hardwire this bit to 0b. \nDefault value of this bit is 0b.",
                    "attributes": "RW",
                    "value_parse": {
                        "0": "Disabled",
                        "1": "Enabled"
                    }
                },
                {
                    "bit": 10,
                    "bit_width": 1,
                    "name": "aux_power_pm_enable",
                    "default": 0,
                    "description": "When Set this bit, enables a Function to draw auxiliary power independent of PME Aux power. \nFunctions that require auxiliary power on legacy operating systems should continue to indicate PME Aux power requirements. \nAuxiliary power is allocated as requested in the Aux_Current field of the Power Management Capabilities Register (PMC), independent of the PME_En bit in the Power Management Control/Status Register (PMCSR). \nFor Multi-Function Devices, a component is allowed to draw auxiliary power if at least one of the Functions has this bit set. \nFunctions that consume auxiliary power must preserve the value of this sticky register when auxiliary power is available. \nIn such Functions, this bit is not modified by Conventional Reset. \nFunctions that do not implement this capability hardwire this bit to 0b.",
                    "attributes": "RWS",
                    "value_parse": {
                        "0": "Disabled",
                        "1": "Enabled"
                    }
                },
                {
                    "bit": 11,
                    "bit_width": 1,
                    "name": "enable_no_snoop",
                    "default": 1,
                    "description": "If this bit is Set, the Function is permitted to Set the No Snoop bit in the Requester Attributes of transactions it initiates that do not require hardware enforced cache coherency. \nA Function is only permitted to Set the No Snoop attribute on a transaction when it can guarantee that the address of the transaction is not stored in any cache in the system. \nThis bit is permitted to be hardwired to 0b if a Function would never Set the No Snoop attribute in transactions it initiates. \nDefault value of this bit is 1b.",
                    "attributes": "RW",
                    "value_parse": {
                        "0": "Disabled",
                        "1": "Enabled"
                    }
                },
                {
                    "bit": 14,
                    "bit_width": 3,
                    "name": "max_read_request_size",
                    "default": "010",
                    "description": "This field sets the maximum Read Request size for the Function as a Requester. The Function must not generate Read Requests with a size exceeding the set value. \nDefined encodings for this field are:\n 128 bytes maximum Read Request size\n 256 bytes maximum Read Request size\n 512 bytes maximum Read Request size\n 1024 bytes maximum Read Request size\n 2048 bytes maximum Read Request size\n 4096 bytes maximum Read Request size\n Reserved\n Reserved",
                    "attributes": "RW",
                    "value_parse": {
                        "000": "128 bytes maximum Read Request size",
                        "001": "256 bytes maximum Read Request size",
                        "010": "512 bytes maximum Read Request size",
                        "011": "1024 bytes maximum Read Request size",
                        "100": "2048 bytes maximum Read Request size",
                        "101": "4096 bytes maximum Read Request size",
                        "110": "Reserved",
                        "111": "Reserved"
                    }
                },
                {
                    "bit": 15,
                    "bit_width": 1,
                    "name": "bridge_config_retry_enable_or_initiate_flr",
                    "default": 0,
                    "description": "This bit has different meanings based on Function type:\n- For PCI Express to PCI/PCI-X Bridges: Bridge Configuration Retry Enable - When Set, this bit enables PCI Express to PCI/PCI-X bridges to return Request Retry Status (RRS) in response to Configuration Requests that target devices below the bridge. \n- For Endpoints with Function Level Reset Capability set to 1b: Initiate Function Level Reset - A write of 1b initiates Function Level Reset to the Function. The value read by software from this bit is always 0b. \nPFs and VFs must support FLR. Note: performing FLR on a PF Clears its VF Enable bit, which causes its VFs no longer to exist after the FLR completes. \n- For all others: Reserved - Must hardwire the bit to 0b.",
                    "attributes": "RW",
                    "value_parse": {
                        "0": "Disabled",
                        "1": "Enabled (FLR or Retry based on Function Type)"
                    }
                }
            ]
        },

        "device_status_register": {
            "offset": 10,
            "size": 4,
            "fields": [{
                    "bit": 0,
                    "bit_width": 1,
                    "name": "correctable_error_detected",
                    "default": 0,
                    "description": "This bit indicates the status of correctable errors detected. Errors are logged in this register regardless of whether error reporting is enabled or not in the Device Control Register. \nFor a Multi-Function Device, each Function indicates status of errors as perceived by the respective Function. \nFor Functions supporting Advanced Error Handling, errors are logged in this register regardless of the settings of the Correctable Error Mask register.",
                    "attributes": "RW1C",
                    "value_parse": {
                        "0": "No correctable errors detected",
                        "1": "Correctable errors detected"
                    }
                },
                {
                    "bit": 1,
                    "bit_width": 1,
                    "name": "non_fatal_error_detected",
                    "default": 0,
                    "description": "This bit indicates status of Non-fatal errors detected. \nErrors are logged in this register regardless of whether error reporting is enabled or not in the Device Control Register. \nFor a Multi-Function Device, each Function indicates status of errors as perceived by the respective Function. \nFor Functions supporting Advanced Error Handling, errors are logged in this register regardless of the settings of the Uncorrectable Error Mask register.",
                    "attributes": "RW1C",
                    "value_parse": {
                        "0": "No non-fatal errors detected",
                        "1": "Non-fatal errors detected"
                    }
                },
                {
                    "bit": 2,
                    "bit_width": 1,
                    "name": "fatal_error_detected",
                    "default": 0,
                    "description": "This bit indicates the status of Fatal errors detected. Errors are logged in this register regardless of whether error reporting is enabled or not in the Device Control Register. \nFor a Multi-Function Device, each Function indicates status of errors as perceived by the respective Function. \nFor Functions supporting Advanced Error Handling, errors are logged in this register regardless of the settings of the Uncorrectable Error Mask register.",
                    "attributes": "RW1C",
                    "value_parse": {
                        "0": "No fatal errors detected",
                        "1": "Fatal errors detected"
                    }
                },
                {
                    "bit": 3,
                    "bit_width": 1,
                    "name": "unsupported_request_detected",
                    "default": 0,
                    "description": "This bit indicates that the Function received an Unsupported Request. \nErrors are logged in this register regardless of whether error reporting is enabled or not in the Device Control Register. \nFor a Multi-Function Device, each Function indicates status of errors as perceived by the respective Function.",
                    "attributes": "RW1C",
                    "value_parse": {
                        "0": "No unsupported request detected",
                        "1": "Unsupported request detected"
                    }
                },
                {
                    "bit": 4,
                    "bit_width": 1,
                    "name": "aux_power_detected",
                    "default": 0,
                    "description": "Functions that require auxiliary power report this bit as Set if auxiliary power is detected by the Function. \nFor VFs, this bit is not supported and must be hardwired to Zero.",
                    "attributes": "RO",
                    "value_parse": {
                        "0": "No auxiliary power detected",
                        "1": "Auxiliary power detected"
                    }
                },
                {
                    "bit": 5,
                    "bit_width": 1,
                    "name": "transactions_pending",
                    "default": 0,
                    "description": "When Set, this bit indicates that the Function has issued Non-Posted Requests that have not been completed. \nA Function reports this bit cleared only when all outstanding Non-Posted Requests have completed or have been terminated by the Completion Timeout mechanism. \nFor Root and Switch Ports, this bit indicates that a Port has issued Non-Posted Requests on its own behalf.",
                    "attributes": "RO",
                    "value_parse": {
                        "0": "No transactions pending",
                        "1": "Transactions pending"
                    }
                },
                {
                    "bit": 6,
                    "bit_width": 1,
                    "name": "emergency_power_reduction_detected",
                    "default": 0,
                    "description": "This bit is Set when the Function is in the Emergency Power Reduction State. \nThe Function remains in this state as long as any condition causing the Emergency Power Reduction State is present. \nThis bit has no effect on write operations, and the state remains unchanged until the condition causing the Emergency Power Reduction is cleared.",
                    "attributes": "RW1C",
                    "value_parse": {
                        "0": "No emergency power reduction detected",
                        "1": "Emergency power reduction detected"
                    }
                }

            ]
        },

        "link_capabilities_register": {
            "offset": 12,
            "size": 4,
            "fields": [{
                    "bit": 0,
                    "bit_width": 4,
                    "name": "max_link_speed",
                    "default": 0,
                    "description": "This field indicates the maximum Link speed of the associated Port. \nThe encoded value specifies a Bit Location in the Supported Link Speeds Vector (in the Link Capabilities 2 Register) that corresponds to the maximum Link speed. \nDefined encodings are:\nSupported Link Speeds Vector field bit 0\nSupported Link Speeds Vector field bit 1\nSupported Link Speeds Vector field bit 2\nSupported Link Speeds Vector field bit 3\nSupported Link Speeds Vector field bit 4\nSupported Link Speeds Vector field bit 5\nSupported Link Speeds Vector field bit 6\nAll other encodings are reserved. \nMulti-Function Devices associated with an Upstream Port must report the same value in this field for all Functions.",
                    "attributes": "RO",
                    "value_parse": {
                        "0000": "Supported Link Speed: bit 0",
                        "0001": "Supported Link Speed: bit 1",
                        "0010": "Supported Link Speed: bit 2",
                        "0011": "Supported Link Speed: bit 3",
                        "0100": "Supported Link Speed: bit 4",
                        "0101": "Supported Link Speed: bit 5",
                        "0110": "Supported Link Speed: bit 6"
                    }
                },
                {
                    "bit": 4,
                    "bit_width": 6,
                    "name": "maximum_link_width",
                    "default": 0,
                    "description": "This field indicates the maximum Link width (xN - corresponding to N Lanes) implemented by the component. \nThis value is permitted to exceed the number of Lanes routed to the slot (Downstream Port), adapter connector (Upstream Port), or in the case of component-to-component connections, the actual wired connection width. \nDefined encodings are:\nx1\nx2\nx4\nx8\nx16\nAll other encodings are Reserved. \nMulti-Function Devices associated with an Upstream Port must report the same value in this field for all Functions.",
                    "attributes": "RO",
                    "value_parse": {
                        "000000": "x1",
                        "000001": "x2",
                        "000010": "x4",
                        "000011": "x8",
                        "000100": "x16"
                    }
                },
                {
                    "bit": 10,
                    "bit_width": 2,
                    "name": "aspm_support",
                    "default": 0,
                    "description": "This field indicates the level of ASPM supported on the given PCI Express Link. \nDefined encodings are:\nNo ASPM Support\nL0s Supported\nL1 Supported\nL0s and L1 Supported\nMulti-Function Devices associated with an Upstream Port must report the same value in this field for all Functions.",
                    "attributes": "RO",
                    "value_parse": {
                        "00": "No ASPM Support",
                        "01": "L0s Supported",
                        "10": "L1 Supported",
                        "11": "L0s and L1 Supported"
                    }
                },
                {
                    "bit": 12,
                    "bit_width": 3,
                    "name": "l0s_exit_latency",
                    "default": 0,
                    "description": "This field indicates the L0s exit latency for the given PCI Express Link. \nThe value reported indicates the length of time this Port requires to complete transition from L0s to L0. \nIf L0s is not supported, the value is undefined; however, see the Implementation Note “Potential Issues With Legacy Software When L0s is Not Supported” for the recommended value. \nDefined encodings are:\nLess than 64 ns\n64 ns to less than 128 ns\n128 ns to less than 256 ns\n256 ns to less than 512 ns\n512 ns to less than 1 μs\n1 μs to less than 2 μs\n2 μs-4 μs\nMore than 4 μs",
                    "attributes": "RO",
                    "value_parse": {
                        "000": "Less than 64 ns",
                        "001": "64 ns to less than 128 ns",
                        "010": "128 ns to less than 256 ns",
                        "011": "256 ns to less than 512 ns",
                        "100": "512 ns to less than 1 μs",
                        "101": "1 μs to less than 2 μs",
                        "110": "2 μs-4 μs",
                        "111": "More than 4 μs"
                    }
                },
                {
                    "bit": 15,
                    "bit_width": 3,
                    "name": "l1_exit_latency",
                    "default": 0,
                    "description": "This field indicates the L1 Exit Latency for the given PCI Express Link. \nThe value reported indicates the length of time this Port requires to complete transition from ASPM L1 to L0. \nIf ASPM L1 is not supported, the value is undefined. \nDefined encodings are:\nLess than 1μs\n1 μs to less than 2 μs\n2 μs to less than 4 μs\n4 μs to less than 8 μs\n8 μs to less than 16 μs\n16 μs to less than 32 μs\n32 μs-64 μs\nMore than 64 μs",
                    "attributes": "RO",
                    "value_parse": {
                        "000": "Less than 1μs",
                        "001": "1 μs to less than 2 μs",
                        "010": "2 μs to less than 4 μs",
                        "011": "4 μs to less than 8 μs",
                        "100": "8 μs to less than 16 μs",
                        "101": "16 μs to less than 32 μs",
                        "110": "32 μs-64 μs",
                        "111": "More than 64 μs"
                    }
                },
                {
                    "bit": 18,
                    "bit_width": 1,
                    "name": "clock_power_management",
                    "default": 0,
                    "description": "For Upstream Ports, a value of 1b in this bit indicates that the component tolerates the removal of any reference clock(s) via the “clock request” (CLKREQ#) mechanism when the Link is in the L1 and L2/L3 Ready Link states. \nA value of 0b indicates the component does not have this capability and that reference clock(s) must not be removed in these Link states. \nThis Capability is applicable only in form factors that support “clock request” (CLKREQ#) capability. \nFor a Multi-Function Device associated with an Upstream Port, each Function indicates its capability independently. Power Management configuration software must only permit reference clock removal if all Functions of the Multi-Function Device indicate a 1b in this bit. \nFor Downstream Ports, this bit must be hardwired to 0b.",
                    "attributes": "RO",
                    "value_parse": {
                        "0": "Clock removal not supported in L1/L2/L3 states",
                        "1": "Clock removal supported in L1/L2/L3 states"
                    }
                },
                {
                    "bit": 19,
                    "bit_width": 1,
                    "name": "surprise_down_error_reporting_capable",
                    "default": 0,
                    "description": "For a Downstream Port, this bit must be Set if the component supports the optional capability of detecting and reporting a Surprise Down error condition. \nFor Upstream Ports and components that do not support this optional capability, this bit must be hardwired to 0b.",
                    "attributes": "RO",
                    "value_parse": {
                        "0": "Surprise Down error reporting not supported",
                        "1": "Surprise Down error reporting supported"
                    }
                },
                {
                    "bit": 20,
                    "bit_width": 1,
                    "name": "data_link_layer_link_active_reporting_capable",
                    "default": 1,
                    "description": "For a Downstream Port, this bit must be hardwired to 1b if the component supports the optional capability of reporting the DL_Active state of the Data Link Control and Management State Machine. \nFor a hot-plug capable Downstream Port or a Downstream Port that supports Link speeds greater than 5.0 GT/s, this bit must be hardwired to 1b. \nFor Upstream Ports and components that do not support this optional capability, this bit must be hardwired to 0b.",
                    "attributes": "RO",
                    "value_parse": {
                        "0": "Link Active reporting not supported",
                        "1": "Link Active reporting supported"
                    }
                },
                {
                    "bit": 21,
                    "bit_width": 1,
                    "name": "link_bandwidth_notification_capability",
                    "default": 0,
                    "description": "A value of 1b indicates support for the Link Bandwidth Notification status and interrupt mechanisms. \nThis capability is required for all Root Ports and Switch Downstream Ports supporting Links wider than x1 and/or multiple Link speeds. \nThis field is not applicable and is Reserved for Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches.",
                    "attributes": "RO",
                    "value_parse": {
                        "0": "Link Bandwidth Notification not supported",
                        "1": "Link Bandwidth Notification supported"
                    }
                },
                {
                    "bit": 22,
                    "bit_width": 1,
                    "name": "aspm_optionality_compliance",
                    "default": 1,
                    "description": "This bit must be set to 1b in all Functions. \nComponents implemented against certain earlier versions of this specification will have this bit set to 0b. \nSoftware is permitted to use the value of this bit to help determine whether to enable ASPM or whether to run ASPM compliance tests.",
                    "attributes": "HwInit",
                    "value_parse": {
                        "0": "ASPM non-compliant",
                        "1": "ASPM compliant"
                    }
                },
                {
                    "bit": 24,
                    "bit_width": 8,
                    "name": "port_number",
                    "default": 0,
                    "description": "This field indicates the PCI Express Port number for the given PCI Express Link. \nMulti-Function Devices associated with an Upstream Port must report the same value in this field for all Functions.",
                    "attributes": "HwInit",
                    "value_parse": {}
                }
            ]
        },

        "link_control_register": {
            "offset": 16,
            "size": 4,
            "fields": [{
                    "bit": 0,
                    "bit_width": 2,
                    "name": "aspm_control",
                    "default": 0,
                    "description": "ASPM Control / Active State Power Management Control - This field controls the level of ASPM enabled on the given PCI Express Link. \nSee § Section 5.4.1.4 for requirements on when and how to enable ASPM.\nDefined encodings are:\nDisabled\nL0s Entry Enabled\nL1 Entry Enabled\nL0s and L1 Entry Enabled\nNote: “L0s Entry Enabled” enables the Transmitter to enter L0s. If L0s is supported, the Receiver must be capable of entering L0s even when the Transmitter is disabled from entering L0s (00b or 10b). In Flit Mode, L0s is not supported, bit 0 of this field is ignored and has no effect (i.e., encodings 01b and 00b are equivalent as are encodings 11b and 10b).\nASPM L1 must be enabled by software in the Upstream component on a Link prior to enabling ASPM L1 in the Downstream component on that Link. When disabling ASPM L1, software must disable ASPM L1 in the Downstream component on a Link prior to disabling ASPM L1 in the Upstream component on that Link. ASPM L1 must only be enabled on the Downstream component if both components on a Link support ASPM L1.\nFor Multi-Function Devices (including ARI Devices), it is recommended that software program the same value for this field in all Functions. For non-ARI Multi-Function Devices, only capabilities enabled in all Functions are enabled for the component as a whole.\nFor ARI Devices, ASPM Control is determined solely by the setting in Function 0, regardless of Function 0’s D-state. The settings in the other Functions always return whatever value software programmed for each, but otherwise are ignored by the component.",
                    "attributes": "RW",
                    "value_parse": {
                        "00": "Disabled",
                        "01": "L0s Entry Enabled",
                        "10": "L1 Entry Enabled",
                        "11": "L0s and L1 Entry Enabled"
                    }
                },
                {
                    "bit": 2,
                    "bit_width": 1,
                    "name": "ptm_propagation_delay_adaptation_interpretation",
                    "default": 0,
                    "description": "For a device that supports PTM, if PTM Propagation Delay Adaptation Capable in the PTM Capability Register is Set, then, for an Upstream Port, this bit when Set selects interpretation B of the Propagation Delay[31:0] field for received PTM ResponseD Messages, and for a Downstream Port, this bit when Set selects interpretation B of the Propagation Delay[31:0] field for PTM ResponseD Messages transmitted by the Port; otherwise this bit when Clear selects interpretation A for both cases. For a device that supports PTM, if its PTM Propagation Delay Adaptation Capable in the PTM Capability Register is Clear, Ports must hardwire this bit to 0b. For Multi-Function Devices associated with an Upstream Port of a device that supports PTM, this bit must be implemented in the same Function that contains the PTM Extended Capability structure and RsvdP in all other Functions. Default value is implementation specific, but is recommended to be 0b. For a device that does not support PTM, for all Ports in that device this bit must be RsvdP.",
                    "attributes": "RW / RsvdP",
                    "value_parse": {
                        "0": "Interpretation A",
                        "1": "Interpretation B"
                    }
                },
                {
                    "bit": 3,
                    "bit_width": 1,
                    "name": "read_completion_boundary",
                    "default": 0,
                    "description": "Read Completion Boundary (RCB) - field is meaningful in Root Ports, Endpoints and Bridges. When meaningful, defined encodings are:\n64 byte\n128 byte\nRCB contains the RCB value for the Root Port. Refer to § Section 2.3.1.1 for the definition of the parameter RCB.\nThis bit is hardwired for a Root Port and returns its RCB support capabilities.\nRead Completion Boundary (RCB) - Optionally Set by configuration software to indicate the RCB value of the Root Port Upstream from the Endpoint or Bridge. Refer to § Section 2.3.1.1 for the definition of the parameter RCB.\nConfiguration software must only Set this bit if the Root Port Upstream from the Endpoint or Bridge reports an RCB value of 128 bytes (a value of 1b in the Read Completion Boundary bit).\nDefault value of this bit is 0b.\nFunctions that do not implement this feature must hardwire the bit to 0b.\nNot applicable - must hardwire the bit to 0b\nRoot Ports: RO\nEndpoints and Bridges: RW\nVF RsvdP\nSwitch Ports: RO",
                    "attributes": "RW",
                    "value_parse": {
                        "0": "64 byte",
                        "1": "128 byte"
                    }
                },
                {
                    "bit": 4,
                    "bit_width": 1,
                    "name": "link_disable",
                    "default": 0,
                    "description": "This bit disables the Link by directing the LTSSM to the Disabled state when Set; this bit is Reserved on Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches.\nSee Implementation Note: Delays in Data Link Layer Link Active Reflecting Link Control Operations for related information.\nWrites to this bit are immediately reflected in the value read from the bit, regardless of actual Link state.\nAfter clearing this bit, software must honor timing requirements defined in § Section 6.6.1 with respect to the first Configuration Read following a Conventional Reset.\nDefault value of this bit is 0b.",
                    "attributes": "RW",
                    "value_parse": {
                        "0": "Link not disabled",
                        "1": "Link disabled"
                    }
                },
                {
                    "bit": 5,
                    "bit_width": 1,
                    "name": "retrain_link",
                    "default": 0,
                    "description": "A write of 1b to this bit initiates Link retraining by directing the Physical Layer LTSSM to the Recovery state. If the LTSSM is already in Recovery or Configuration, re-entering Recovery is permitted but not required. If the Port is in DPC when a write of 1b to this bit occurs, the result is undefined. Reads of this bit always return 0b.\nIt is permitted to write 1b to this bit while simultaneously writing modified values to other fields in this register. If the LTSSM is not already in Recovery or Configuration, the resulting Link training must be reinitialized.",
                    "attributes": "RW",
                    "value_parse": {
                        "0": "No retrain initiated",
                        "1": "Retrain initiated"
                    }
                },
                {
                    "bit": 6,
                    "bit_width": 1,
                    "name": "common_clock_configuration",
                    "default": 0,
                    "description": "When Set, this bit indicates that this component and the component at the opposite end of this Link are operating with a distributed common reference clock.\nA value of 0b indicates that this component and the component at the opposite end of this Link are operating with asynchronous reference clock.\nFor non-ARI Multi-Function Devices, software must program the same value for this bit in all Functions. If not all Functions are Set, then the component must as a whole assume that its reference clock is not common with the Upstream component.\nFor ARI Devices, Common Clock Configuration is determined solely by the setting in Function 0. The settings in the other Functions always return whatever value software programmed for each, but otherwise are ignored by the component.\nComponents utilize this Common Clock Configuration information to report the correct L0s and L1 Exit Latencies.\nAfter changing the value in this bit in both components on a Link, software must trigger the Link to retrain by writing a 1b to the Retrain Link bit of the Downstream Port.\nDefault value of this bit is 0b.",
                    "attributes": "RW",
                    "value_parse": {
                        "0": "Asynchronous reference clock",
                        "1": "Common reference clock"
                    }
                },
                {
                    "bit": 7,
                    "bit_width": 1,
                    "name": "extended_synch",
                    "default": 0,
                    "description": "When Set, this bit forces the transmission of additional Ordered Sets when exiting the L0s state and when in the Recovery state.\nThis mode provides external devices (e.g., logic analyzers) monitoring the Link time to achieve bit and Symbol lock before the Link enters the L0 state and resumes communication.\nFor Multi-Function Devices if any Function has this bit Set, then the component must transmit the additional Ordered Sets when exiting L0s or when in Recovery.\nDefault value for this bit is 0b.",
                    "attributes": "RW",
                    "value_parse": {
                        "0": "No extended synchronization",
                        "1": "Extended synchronization enabled"
                    }
                },
                {
                    "bit": 8,
                    "bit_width": 1,
                    "name": "enable_clock_power_management",
                    "default": 0,
                    "description": "Applicable only for Upstream Ports and with form factors that support a “Clock Request” (CLKREQ#) mechanism, this bit operates as follows:\nClock power management is disabled and device must hold CLKREQ# signal low.\nWhen this bit is Set, the device is permitted to use CLKREQ# signal to power manage Link clock according to protocol defined in appropriate form factor specification.\nFor a non-ARI Multi-Function Device, power-management-configuration software must only Set this bit if all Functions of the Multi-Function Device indicate a 1b in the Clock Power Management bit of the Link Capabilities Register. The component is permitted to use the CLKREQ# signal to power manage Link clock only if this bit is Set for all Functions.\nFor ARI Devices, Clock Power Management is enabled solely by the setting in Function 0. The settings in the other Functions always return whatever value software programmed for each, but otherwise are ignored by the component.\nThe CLKREQ# signal may also be controlled via the L1 PM Substates mechanism. Such control is not affected by the setting of this bit.\nDownstream Ports and components that do not support Clock Power Management (as indicated by a 0b value in the Clock Power Management bit of the Link Capabilities Register) must hardwire this bit to 0b.\nDefault value of this bit is 0b, unless specified otherwise by the form factor specification.",
                    "attributes": "RW",
                    "value_parse": {
                        "0": "Clock power management disabled",
                        "1": "Clock power management enabled"
                    }
                },
                {
                    "bit": 9,
                    "bit_width": 1,
                    "name": "hardware_autonomous_width_disable",
                    "default": 0,
                    "description": "When Set, this bit disables hardware from changing the Link width for reasons other than attempting to correct unreliable Link operation by reducing Link width.\nFor a Multi-Function Device associated with an Upstream Port, the bit in Function 0 is of type RW, and only Function 0 controls the component’s Link behavior. In all other Functions of that device, this bit is of type RsvdP.\nComponents that do not implement the ability autonomously to change Link width are permitted to hardwire this bit to 0b.\nDefault value of this bit is 0b.",
                    "attributes": "RW/RsvdP",
                    "value_parse": {
                        "0": "Link width change enabled",
                        "1": "Link width change disabled"
                    }
                },
                {
                    "bit": 10,
                    "bit_width": 1,
                    "name": "link_bandwidth_management_interrupt_enable",
                    "default": 0,
                    "description": "When Set, this bit enables the generation of an interrupt to indicate that the Link Bandwidth Management Status bit has been Set.\nThis bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.\nFunctions that do not implement the Link Bandwidth Notification Capability must hardwire this bit to 0b.\nDefault value of this bit is 0b.",
                    "attributes": "RW",
                    "value_parse": {
                        "0": "Interrupt not enabled",
                        "1": "Interrupt enabled"
                    }
                },
                {
                    "bit": 11,
                    "bit_width": 1,
                    "name": "link_autonomous_bandwidth_interrupt_enable",
                    "default": 0,
                    "description": "When Set, this bit enables the generation of an interrupt to indicate that the Link Autonomous Bandwidth Status bit has been Set.\nThis bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.\nFunctions that do not implement the Link Bandwidth Notification Capability must hardwire this bit to 0b.\nDefault value of this bit is 0b.",
                    "attributes": "RW",
                    "value_parse": {
                        "0": "Interrupt not enabled",
                        "1": "Interrupt enabled"
                    }
                },
                {
                    "bit": 12,
                    "bit_width": 1,
                    "name": "sris_clocking",
                    "default": 0,
                    "description": "This bit, in conjunction with Common Clock Configuration, indicates the clocking mode used on the Link.\nThis bit is meaningful in Downstream Ports that support Flit Mode. In all other Functions, this bit is RsvdP.\nIf Common Clock Configuration is Set, this bit has no effect and the SRIS Clocking bit in the TS1s must be 0b (Symbol 4, bit 7).\nIf Common Clock Configuration is Clear, this bit is sent in the SRIS Clocking bit of TS1s (Symbol 4, bit 7).\nClocking Mode | Common Clock Configuration | SRIS Clocking\nCommon Clock | 1 | x\nSRNS | 0 | 0\nSRIS | 0 | 1\nDefault is 0b.",
                    "attributes": "RW",
                    "value_parse": {
                        "0": "SRNS Clocking Mode",
                        "1": "SRIS Clocking Mode"
                    }
                },
                {
                    "bit": 13,
                    "bit_width": 1,
                    "name": "flit_mode_disable",
                    "default": 0,
                    "description": "When Set, the Port is not permitted to set the Flit Mode Supported bit in training sets it sends. This bit has no effect on the Flit Mode Supported bit in the PCI Express Capabilities Register and thus has no effect on behavior required by MUST@FLIT.\nSince Flit Mode is required at 64.0 GT/s or higher, disabling Flit Mode also has the effect of disabling data rates of 64.0 GT/s or higher.\nThis bit is mandatory in Downstream Ports where Flit Mode Supported is Set.\nFor Functions associated with an Upstream Port, this bit is optionally implemented in Function 0 and is not implemented in all other Functions. When not implemented, this bit must be hardwired to Zero.",
                    "attributes": "RW",
                    "value_parse": {
                        "0": "Flit Mode enabled",
                        "1": "Flit Mode disabled"
                    }
                },
                {
                    "bit": 14,
                    "bit_width": 2,
                    "name": "drs_signaling_control",
                    "default": 0,
                    "description": "Indicates the mechanism used to report reception of a DRS message. Must be implemented for Downstream Ports with the DRS Supported bit Set in the Link Capabilities 2 Register.\nEncodings are:\n00: DRS not Reported - If DRS Supported is Set, receiving a DRS Message will set DRS Message Received in the Link Status 2 Register but will otherwise have no effect.\n01: DRS Interrupt Enabled - If the DRS Message Received bit in the Link Status 2 Register transitions from 0 to 1, and either MSI or MSI-X is enabled, an MSI or MSI-X interrupt is generated using the vector in Interrupt Message Number (§ Section 7.5.3.2).\n10: DRS to FRS Signaling Enabled - If the DRS Message Received bit in the Link Status 2 Register transitions from 0 to 1, the Port must send an FRS Message Upstream with the FRS Reason field set to DRS Message Received.\nBehavior is undefined if this field is set to 10b and the FRS Supported bit in the Device Capabilities 2 Register is Clear.\nBehavior is undefined if this field is set to 11b.\nDownstream Ports with the DRS Supported bit Clear in the Link Capabilities 2 Register must hardwire this field to 00b.\nThis field is Reserved for Upstream Ports.\nDefault value of this field is 00b.",
                    "attributes": "RW/RsvdP",
                    "value_parse": {
                        "00": "DRS not reported",
                        "01": "DRS interrupt enabled",
                        "10": "DRS to FRS signaling enabled",
                        "11": "Reserved"
                    }
                }
            ]
        },

        "link_status_register": {
            "offset": 18,
            "size": 4,
            "fields": [{
                    "bit": 3,
                    "bit_width": 4,
                    "name": "current_link_speed",
                    "default": 0,
                    "description": "This field indicates the negotiated Link speed of the given PCI Express Link.\nThe encoded value specifies a Bit Location in the Supported Link Speeds Vector (in the Link Capabilities 2 Register) that corresponds to the current Link speed.\nDefined encodings are:\n- Supported Link Speeds Vector field bit 0\n- Supported Link Speeds Vector field bit 1\n- Supported Link Speeds Vector field bit 2\n- Supported Link Speeds Vector field bit 3\n- Supported Link Speeds Vector field bit 4\n- Supported Link Speeds Vector field bit 5\n- Supported Link Speeds Vector field bit 6\nAll other encodings are Reserved.\nThe value in this field is undefined when the Link is not up.",
                    "attributes": "RO",
                    "value_parse": {
                        "0": "Bit 0: Speed 1.0 GT/s",
                        "1": "Bit 1: Speed 2.5 GT/s",
                        "2": "Bit 2: Speed 5.0 GT/s",
                        "3": "Bit 3: Speed 8.0 GT/s",
                        "4": "Bit 4: Speed 16.0 GT/s",
                        "5": "Bit 5: Speed 32.0 GT/s",
                        "6": "Bit 6: Speed 64.0 GT/s"
                    }
                },
                {
                    "bit": 4,
                    "bit_width": 6,
                    "name": "negotiated_link_width",
                    "default": 0,
                    "description": "This field indicates the negotiated width of the given PCI Express Link. This includes the Link Width determined during initial link training as well changes that occur after initial link training (e.g., L0p).\nDefined encodings are:\n- x1\n- x2\n- x4\n- x8\n- x16\nAll other encodings are Reserved. The value in this field is undefined when the Link is not up.",
                    "attributes": "RO",
                    "value_parse": {
                        "0": "x1",
                        "1": "x2",
                        "2": "x4",
                        "3": "x8",
                        "4": "x16"
                    }
                },
                {
                    "bit": 10,
                    "bit_width": 1,
                    "name": "undefined_bit",
                    "default": 0,
                    "description": "The value read from this bit is undefined. In previous versions of this specification, this bit was used to indicate a Link Training Error. System software must ignore the value read from this bit.\nSystem software is permitted to write any value to this bit.",
                    "attributes": "RO",
                    "value_parse": {
                        "0": "Reserved",
                        "1": "Reserved"
                    }
                },
                {
                    "bit": 11,
                    "bit_width": 1,
                    "name": "link_training",
                    "default": 0,
                    "description": "This read-only bit indicates that the Physical Layer LTSSM is in the Configuration or Recovery state, or that 1b was written to the Retrain Link bit but Link training has not yet begun.\nHardware clears this bit when the LTSSM exits the Configuration/Recovery state.\nThis bit is not applicable and Reserved for Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches, and must be hardwired to 0b.",
                    "attributes": "RO",
                    "value_parse": {
                        "0": "Link training not active",
                        "1": "Link training active"
                    }
                },
                {
                    "bit": 12,
                    "bit_width": 1,
                    "name": "slot_clock_configuration",
                    "default": 0,
                    "description": "This bit indicates that the component uses the same physical reference clock that the platform provides on the connector. If the device uses an independent clock irrespective of the presence of a reference clock on the connector, this bit must be clear.\nFor a Multi-Function Device, each Function must report the same value for this bit.",
                    "attributes": "HwInit",
                    "value_parse": {
                        "0": "Independent clock used",
                        "1": "Reference clock used"
                    }
                },
                {
                    "bit": 13,
                    "bit_width": 1,
                    "name": "data_link_layer_link_active",
                    "default": 0,
                    "description": "This bit indicates the status of the Data Link Control and Management State Machine. It returns a 1b to indicate the DL_Active state, 0b otherwise.\nSee Implementation Note: Delays in Data Link Layer Link Active Reflecting Link Control Operations for related information.\nThis bit must be implemented if the Data Link Layer Link Active Reporting Capable bit is 1b. Otherwise, this bit must be hardwired to 0b.",
                    "attributes": "RO",
                    "value_parse": {
                        "0": "Data Link Layer not active",
                        "1": "Data Link Layer active"
                    }
                },
                {
                    "bit": 14,
                    "bit_width": 1,
                    "name": "link_bandwidth_management_status",
                    "default": 0,
                    "description": "This bit is Set by hardware to indicate that either of the following has occurred without the Port transitioning through DL_Down status:\n- A Link retraining has completed following a write of 1b to the Retrain Link bit.\n- Hardware has changed Link speed or width to attempt to correct unreliable Link operation, either through an LTSSM timeout or a higher-level process.\nThis bit must be set if the Physical Layer reports a speed or width change was initiated by the Downstream component that was not indicated as an autonomous change.\nThis bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.\nFunctions that do not implement the Link Bandwidth Notification Capability must hardwire this bit to 0b.",
                    "attributes": "RW1C",
                    "value_parse": {
                        "0": "Link bandwidth management not active",
                        "1": "Link bandwidth management active"
                    }
                },
                {
                    "bit": 15,
                    "bit_width": 1,
                    "name": "link_autonomous_bandwidth_status",
                    "default": 0,
                    "description": "This bit is Set by hardware to indicate that hardware has autonomously changed Link speed or width, without the Port transitioning through DL_Down status, for reasons other than to attempt to correct unreliable Link operation.\nThis bit must be set if the Physical Layer reports a speed or width change was initiated by the Downstream component that was indicated as an autonomous change.\nThis bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.\nFunctions that do not implement the Link Bandwidth Notification Capability must hardwire this bit to 0b.",
                    "attributes": "RW1C",
                    "value_parse": {
                        "0": "No autonomous bandwidth change",
                        "1": "Autonomous bandwidth change"
                    }
                }
            ]
        }

    }
}